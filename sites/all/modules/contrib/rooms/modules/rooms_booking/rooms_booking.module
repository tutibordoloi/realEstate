<?php

/**
 * @file
 * Manage Bookings - Bookings are tied to a customer profile and possible a Unit ID and Order ID
 */

// This is a special booking type used to avoid confusion between
// deleted bookings directly or deleting them because we deleted
// a line item or an order.
define('ROOMS_BOOKING_DELETED', 'rooms_booking_deleted');


/**
 * Implements hook_menu().
 */
function rooms_booking_menu() {
  $items  =  array();

  $items['admin/rooms/bookings/customers'] = array(
    'title' => 'Customers',
    'page callback' => 'rooms_booking_get_client_profiles',
    'access arguments' => array('administer bookings'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/rooms/bookings/room_types'] = array(
    // This is a json request to list booking room_types.
    'page callback' => 'rooms_booking_get_room_types',
    'access arguments' => array('administer bookings'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/rooms/add_customers'] = array(
    'title' => 'Add customer profile',
    'page callback' => 'rooms_booking_add_customer_profile',
    'access arguments' => array('administer bookings'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/rooms/customer-profiles/%/edit'] = array(
    'title' => 'Edit customer profile',
    'page callback' => 'rooms_booking_edit_customer_profile',
    'page arguments' => array(3),
    'access arguments' => array('administer bookings'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/rooms/config/children'] = array(
    'title' => 'Children Discount Settings',
    'description' => 'Configure settings for children discounts.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rooms_booking_children_discount'),
    'access arguments' => array('configure room settings'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}


function rooms_booking_edit_customer_profile($customer_id) {
  ctools_include('modal');

  module_load_include('inc', 'commerce_customer', 'includes/commerce_customer_profile.forms');
  $form_state = array(
    'title' => t('Add customer'),
    'ajax' => TRUE,
    'build_info' => array(
      'args' => array(commerce_customer_profile_load($customer_id)),
      'files' => array(
        'commmerce_customer' => array(
          'module' => 'commmerce_customer',
          'name' => 'includes/commerce_customer_profile.forms',
          'type' => 'inc',
        ),
      ),
    ),
  );

  // Wrap the form via ctools modal.
  $output = ctools_modal_form_wrapper('commerce_customer_ui_customer_profile_form', $form_state);

  if ($form_state['executed']) {
    $output = array(ctools_modal_command_dismiss());
  }

  print ajax_render($output);
  exit();
}


function rooms_booking_children_discount($form, &$form_state) {

  drupal_add_css(drupal_get_path('module', 'rooms_booking') . '/css/rooms_booking.css');
  $form['#attributes']['class'][] = 'rooms-management-form children-discount-form';

  $form['#tree'] = TRUE;

  if (empty($form_state['num_options'])) {
    $options = variable_get('rooms_children_discount_options', array());

    if (empty($options)) {
      $form_state['num_options'] = 1;
    }
    else {
      $form_state['num_options'] = count($options);
    }
  }

  // This string gives us an easy way to translate the sentence used for
  // giving the child discount, and at the same time we can break the string
  // into components to use around our fields with clever useage of "explode".
  // The "<wbr>" is used here to create an invisible boundary between the
  // "option" field suffix and the "start" field prefix.
  $string = t('Give a @amount % discount <wbr> for children ages @start to @end.');

  list($option_prefix, $string) = explode('@amount', $string);
  list($option_suffix, $string) = explode('<wbr>', $string);
  list($start_prefix, $string) = explode('@start', $string);
  list($end_prefix, $end_suffix) = explode('@end', $string);

  for ($i = 1; $i <= $form_state['num_options']; $i++) {
    $form['option'][$i] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('child-discount container-inline')),
    );
    $form['option'][$i]['discount'] = array(
      '#type' => 'textfield',
      '#field_prefix' => $option_prefix,
      '#field_suffix' => $option_suffix,
      '#size' => 10,
      '#maxlength' => 10,
      '#required' => TRUE,
      '#default_value' => isset($options[$i]['end']) ? $options[$i]['discount'] : '',
      '#attributes' => array('class' => array('child-discount__amount')),
    );
    $form['option'][$i]['start'] = array(
      '#type' => 'textfield',
      '#field_prefix' => $start_prefix,
      '#size' => 5,
      '#maxlength' => 5,
      '#required' => TRUE,
      '#default_value' => isset($options[$i]['start']) ? $options[$i]['start'] : '',
      '#attributes' => array('class' => array('child-discount__age-start')),
    );
    $form['option'][$i]['end'] = array(
      '#type' => 'textfield',
      '#field_prefix' => $end_prefix,
      '#field_suffix' => $end_suffix,
      '#size' => 5,
      '#maxlength' => 5,
      '#required' => TRUE,
      '#default_value' => isset($options[$i]['end']) ? $options[$i]['end'] : '',
      '#attributes' => array('class' => array('child-discount__age-end')),
    );
  }
  $form['actions'] = array(
    '#type' => 'actions',
    '#tree' => FALSE,
  );
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#attributes' => array('class' => array('child-discount__save-button')),
  );

  $form['actions']['add_option'] = array(
    '#type' => 'submit',
    '#value' => t('Add another discount'),
    '#submit' => array('rooms_booking_children_discount_add_option'),
    '#attributes' => array('class' => array('child-discount__add-button')),
  );

  if ($form_state['num_options'] > 1) {
    $form['actions']['remove_option'] = array(
      '#type' => 'submit',
      '#value' => t('Remove last discount'),
      '#submit' => array('rooms_booking_children_discount_remove_option'),
      '#limit_validation_errors' => array(),
      '#attributes' => array('class' => array('child-discount__remove-button')),
    );
  }

  return $form;
}


function rooms_booking_children_discount_validate($form, &$form_state) {
  foreach ($form_state['values']['option'] as $key => $value) {
    if ($value['start'] != '' || $value['end'] != '' || $value['discount'] != '') {
      if (!is_numeric($value['start'])) form_set_error('option]['.$key.'][start', t('This is not a valid integer.'));
      if (!is_numeric($value['end'])) form_set_error('option]['.$key.'][end', t('This is not a valid integer.'));
      if (!is_numeric($value['discount'])) form_set_error('option]['.$key.'][discount', t('This is not a valid discount.'));
    }
  }
}


function rooms_booking_children_discount_submit($form, &$form_state) {
  $options = array();

  for ($i = 1; $i <= $form_state['num_options']; $i++) {
    $options[$i] = array(
      'start' => $form_state['values']['option'][$i]['start'],
      'end' => $form_state['values']['option'][$i]['end'],
      'discount' => $form_state['values']['option'][$i]['discount'],
    );
  }

  variable_set('rooms_children_discount_options', $options);
}


function rooms_booking_children_discount_add_option($form, &$form_state) {
  $form_state['num_options']++;

  $form_state['rebuild'] = TRUE;
}


function rooms_booking_children_discount_remove_option($form, &$form_state) {
  if ($form_state['num_options'] > 1) {
    $form_state['num_options']--;
  }

  $form_state['rebuild'] = TRUE;
}


function rooms_booking_add_customer_profile() {
  ctools_include('modal');

  module_load_include('inc', 'commerce_customer', 'includes/commerce_customer_profile.forms');
  $form_state = array(
    'title' => t('Add customer'),
    'ajax' => TRUE,
    'build_info' => array(
      'args' => array(commerce_customer_profile_new('billing', 1)),
      'files' => array(
        'commmerce_customer' => array(
          'module' => 'commmerce_customer',
          'name' => 'includes/commerce_customer_profile.forms',
          'type' => 'inc',
        ),
      ),
    ),
  );

  // Wrap the form via ctools modal.
  $output = ctools_modal_form_wrapper('commerce_customer_customer_profile_form', $form_state);

  if ($form_state['executed']) {
    $form['client'] = array(
      '#type' => 'textfield',
      '#title' => t('Customer'),
      '#maxlength' => 60,
      '#autocomplete_path' => 'admin/rooms/bookings/customers',
      '#value' => $form_state['build_info']['args'][0]->commerce_customer_address['und'][0]['name_line'],
      '#weight' => -1,
      '#required' => TRUE,
      '#prefix' => '<div class="form-wrapper" id="edit-customer-wrapper">',
      '#suffix' => '</div>',
      '#id' => 'edit-client',
      '#name' => 'client',
    );

    if (module_exists('commerce_customer')) {
      ctools_include('modal');
      ctools_modal_add_js();

      $form['client']['#description'] = t('Customer profiles are saved in the <a href="@store-profile">store</a>. Search for an existing one by typing the customer name or <a href="@profile-create" class="ctools-use-modal">create a new profile</a>.', array('@store-profile' => url('admin/commerce/customer-profiles'), '@profile-create' => url('admin/rooms/add_customers')));

      if (isset($form_state['build_info']['args'][0]->profile_id)) {
        $form['client']['#field_suffix'] = t('<a href="@edit-profile" class="ctools-use-modal">edit profile</a>', array('@edit-profile' => url('admin/rooms/customer-profiles/' . $form_state['build_info']['args'][0]->profile_id . '/edit')));
      }
    }

    $output = array(ctools_modal_command_dismiss(), ajax_command_replace('#edit-customer-wrapper', drupal_render($form['client'])));
  }

  print ajax_render($output);
  exit();
}


/**
 * Implements hook_entity_info().
 */
function rooms_booking_entity_info() {
  $return['rooms_booking'] = array(
    'label' => t('Bookings'),
    // The entity class and controller class extend the classes provided by the
    // Entity API
    'entity class' => 'RoomsBooking',
    'controller class' => 'RoomsBookingController',
    'base table' => 'rooms_bookings',
    'fieldable' => TRUE,
    'entity keys' => array(
        'id' => 'booking_id',
        'bundle' => 'type',
    ),
    // Bundles are defined by the booking types below
    'bundles' => array(),
    // Bundle keys tell the FieldAPI how to extract information from the bundle objects
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'rooms_booking_create',
    'access callback' => 'rooms_booking_access',
    'module' => 'rooms_booking',
    // The information below is used by the RoomsRoomUIController (which extends the EntityDefaultUIController)
    'admin ui' => array(
      'path' => 'admin/rooms/bookings',
      'file' => 'rooms_booking.admin.inc',
      'controller class' => 'RoomsBookingUIController',
      'menu wildcard' => '%rooms_booking',
    ),
  );
  // The entity that holds information about the entity types
  $return['rooms_booking_type'] = array(
    'label' => t('Booking Type'),
    'entity class' => 'RoomsBookingType',
    'controller class' => 'RoomsBookingTypeController',
    'base table' => 'rooms_booking_type',
    'fieldable' => FALSE,
    'bundle of' => 'rooms_booking',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'access callback' => 'rooms_booking_type_access',
    'module' => 'rooms_booking',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/rooms/bookings/booking-types',
      'file' => 'rooms_booking_type.admin.inc',
      'controller class' => 'RoomsBookingTypeUIController',
    ),
  );

  return $return;
}


/**
 * Implements hook_entity_info_alter().
 *
 * We are adding the info about the booking types via a hook to avoid a recursion
 * issue as loading the room types requires the entity info as well.
 *
 * @todo This needs to be improved
 */
function rooms_booking_entity_info_alter(&$entity_info) {
  foreach (rooms_booking_get_types() as $type => $info) {
    $entity_info['rooms_booking']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/rooms/bookings/booking-types/manage/%rooms_booking_type',
        'real path' => 'admin/rooms/bookings/booking-types/manage/' . $type,
        'bundle argument' => 5,
        'access arguments' => array('administer bookings'),
      ),
    );
  }
}


/**
 * Implements hook_entity_property_info_alter().
 */
function rooms_booking_entity_property_info_alter(&$info) {
  $info['rooms_booking']['properties']['booking_status']['setter callback'] = 'entity_property_verbatim_set';
}


/**
 * Implements hook_permission().
 */
function rooms_booking_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
    'administer booking types' => array(
      'title' => t('Administer booking types'),
      'description' => t('Create and delete fields for booking types, and set their permissions.'),
    ),
    'administer bookings' => array(
      'title' => t('Administer bookings'),
      'description' => t('Edit and delete all bookings'),
    ),
  );

  // Generate permissions per room.
  foreach (rooms_booking_get_types() as $type) {
    $type_name = check_plain($type->type);
    $permissions += array(
      "edit any $type_name booking" => array(
        'title' => t('%type_name: Edit any booking', array('%type_name' => $type->label)),
      ),
      "view any $type_name booking" => array(
        'title' => t('%type_name: View any booking', array('%type_name' => $type->label)),
      ),
    );
  }
  return $permissions;
}


/**
 * Implements hook_ctools_plugin_type().
 */
function rooms_booking_ctools_plugin_type() {
  return array(
    'availabilityagent_filter' => array(
      'use hooks' => TRUE,
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter()-
 * FORM_ID = rooms_booking_settings
 */
function rooms_booking_form_rooms_booking_settings_alter(&$form, &$form_state, $form_id) {
  form_load_include($form_state, 'inc', 'rules', 'ui/ui.forms');
  $form['rooms_booking_expiration_time'] = array(
    '#title' => t('Cart expiration time'),
    '#type' => 'rules_duration',
    '#default_value' => variable_get('rooms_booking_expiration_time', 172800),
    '#description' => t('Set the time after the carts will expire.'),
    '#weight' => 50,
  );
}

/**
 * Implements hook_rules_action_info_alter().
 */
function rooms_booking_rules_action_info_alter(&$actions) {
  unset($actions['commerce_cart_expiration_delete_orders']['parameter']['interval']);
  $actions['commerce_cart_expiration_delete_orders']['callbacks']['execute'] = 'rooms_booking_expiration_delete_orders';
}

/**
 * Rules action: deletes expired cart orders based on the provided limit.
 */
function rooms_booking_expiration_delete_orders($limit) {
  module_load_include('inc', 'commerce_cart_expiration', 'commerce_cart_expiration.rules');
  $interval = variable_get('rooms_booking_expiration_time', 172800);
  commerce_cart_expiration_delete_orders($interval, $limit);
}

/**
 * Determines whether the given user has access to a booking.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $booking
 *   Optionally a booking to check access for. If nothing is
 *   given, access for all bookings is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function rooms_booking_access($op, $booking = NULL, $account = NULL) {
  if (user_access('administer bookings', $account)) {
    return TRUE;
  }
  if (is_object($booking)) {
    if ($type_name = $booking->type) {
      $op = ($op == 'view') ? 'view' : 'edit';
      if (user_access("$op any $type_name booking", $account)) {
        return TRUE;
      }
    }
  }
  return FALSE;
}


/**
 * Access callback for the entity API.
 */
function rooms_booking_type_access($op, $type = NULL, $account = NULL) {
  return user_access('administer booking types', $account);
}


/**
 * Gets an array of all booking types, keyed by the type name.
 *
 * @param $type_name
 *   If set, the type with the given name is returned.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return RoomsBookingType[]
 *   Depending whether $type isset, an array of booking types or a single one.
 */
function rooms_booking_get_types($type_name = NULL, $reset = FALSE) {
  // entity_load will get the Entity controller for our booking entity and call the load
  // function of that object.
  $types = entity_load_multiple_by_name('rooms_booking_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}



/**
 * Menu argument loader; Load a booking type by string.
 *
 * @param $type
 *   The machine-readable name of a booking type to load.
 * @return
 *   A booking type array or FALSE if $type does not exist.
 */
function rooms_booking_type_load($type, $reset = FALSE) {
  return rooms_booking_get_types($type, $reset);
}


/**
 * Fetch a booking object. Make sure that the wildcard you choose
 * in the boking entity definition fits the function name here.
 *
 * @param $booking_id
 *   Integer specifying the booking id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $booking object or FALSE if it cannot be loaded.
 *
 * @see rooms_booking_load_multiple()
 */
function rooms_booking_load($booking_id, $reset = FALSE) {
  $bookings = rooms_booking_load_multiple(array($booking_id), array(), $reset);
  return reset($bookings);
}


/**
 * Load multiple bookings based on certain conditions.
 *
 * @param $booking_ids
 *   An array of booking IDs.
 * @param $conditions
 *   An array of conditions to match against the {rooms_bookings} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of booking objects, indexed by booking_id.
 *
 * @see entity_load()
 * @see rooms_booking_load()
 */
function rooms_booking_load_multiple($booking_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('rooms_booking', $booking_ids, $conditions, $reset);
}


/**
 * Deletes a booking
 *
 * @param RoomsBooking $booking
 *   The RoomsBooking object that represents the booking to delete
 */
function rooms_booking_delete(RoomsBooking $booking, $delete_line_item = TRUE) {
  // Check if the booking had a unit associated with it and if so update the availability calendar
  if (isset($booking->unit_id) && isset($booking->start_date) && isset($booking->end_date)) {
      $uc = new UnitCalendar($booking->unit_id);
      // We are not concerned with the state of the event id (confirmed or unconfirmed here)
      // because we will unlock it no matter what (we look for absolute value)
      $event_id = rooms_availability_assign_id($booking->booking_id);
      // Create an event representing the event to remove
      $start_date = $booking->start_date_object;
      $end_date = $booking->end_date_object;
      // Remove a day from end date to represent the actual event
      $end_date->sub(new DateInterval('P1D'));
      $be = new BookingEvent($booking->unit_id, $event_id, $start_date, $end_date);
      $uc->removeEvents(array($be));
      // We've updated the calendar so mark the booking as deleted.
      $booking->type = ROOMS_BOOKING_DELETED;
      $booking->save();
  }

  if ($booking->order_id != '' && $delete_line_item) {
    $order = commerce_order_load($booking->order_id);

    if (isset($order->commerce_line_items[LANGUAGE_NONE])) {
      foreach ($order->commerce_line_items[LANGUAGE_NONE] as $value) {
        $line_item = commerce_line_item_load($value['line_item_id']);

        if ($line_item->rooms_booking_reference[LANGUAGE_NONE][0]['target_id'] == $booking->booking_id) {
          commerce_line_item_delete($line_item->line_item_id);
          if (count($order->commerce_line_items) == 0) {
            commerce_order_delete($order->order_number);
          }

          break;
        }
      }
    }
  }

  if ($booking->type = ROOMS_BOOKING_DELETED) {
    $booking->delete();
  }
}


/**
 * Implements hook_commerce_line_item_delete().
 */
function rooms_booking_commerce_line_item_delete($line_item) {
  if (isset($line_item->rooms_booking_reference[LANGUAGE_NONE][0]['target_id'])) {
    $booking = rooms_booking_load($line_item->rooms_booking_reference[LANGUAGE_NONE][0]['target_id']);

    if ($booking !== FALSE) {
      if ($line_item->order_id == $booking->order_id) {
        rooms_booking_delete($booking, FALSE);
      }
    }
  }
}


/**
 * Implements hook_commerce_order_delete().
 *
 * Delete bookings associated with an order when deleting the order.
 */
function rooms_booking_commerce_order_delete($order) {

  // Load the bookings associated with this order.
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'rooms_booking')
    ->propertyCondition('order_id', $order->order_id);
  $bookings = $query->execute();

  // Delete all bookings associated with this order.
  if (isset($bookings['rooms_booking']) && count($bookings['rooms_booking'])) {
    foreach ($bookings['rooms_booking'] as $result) {
      $booking = rooms_booking_load($result->booking_id);

      if ($booking !== FALSE) {
        rooms_booking_delete($booking);
        drupal_set_message(t('Deleted booking with id: %id', array('%id' => $result->booking_id)));
      }
    }
  }
}


/**
 * Delete multiple bookings.
 *
 * @param $booking_ids
 *   An array of booking IDs.
 */
function rooms_booking_delete_multiple(array $booking_ids) {
  entity_get_controller('rooms_booking')->delete($booking_ids);
}


/**
 * Create a booking object.
 */
function rooms_booking_create($values = array()) {
  return entity_get_controller('rooms_booking')->create($values);
}


/**
 * Saves a booking to the database.
 *
 * @param RoomsBooking $booking
 *   The Booking object.
 */
function rooms_booking_save(RoomsBooking $booking) {
  return $booking->save();
}


/**
 * Saves a booking type to the db.
 */
function rooms_booking_type_save(RoomsBookingType $type) {
  $type->save();
}


/**
 * Deletes a booking type from the db.
 */
function rooms_booking_type_delete(RoomsBookingType $type) {
  $type->delete();
}


/**
 * URI callback for bookings
 */
function rooms_booking_uri(RoomsBooking $booking) {
  return array(
    'path' => 'booking/' . $booking->booking_id,
  );
}


/**
 * Menu title callback for showing individual entities
 */
function rooms_booking_page_title(RoomsBooking $booking) {
  return $booking->name;
}


/**
 * Get a list of Booking keyed by id and name in value
 *
 * @todo - double check utility of this and perhaps use rooms_booking_load_multiple
 */
function rooms_booking_ids($conditions = array()) {

  $bookings = array();

  $query = new EntityFieldQuery();

  $result = $query->entityCondition('entity_type', 'rooms_booking')
                    ->execute();

  if (count($result) > 0 ) {
    $entities = entity_load('rooms_booking', array_keys($result['rooms_booking']));
    foreach ($entities as $booking) {
      $wrapper = entity_metadata_wrapper('rooms_booking', $booking);
      $bookings[$wrapper->booking_id->value()] = $wrapper->name->value();
    }
  }

  return $bookings;
}

/**
 * Sets up content to show an individual booking
 * @todo - get rid of drupal_set_title();
 */
function rooms_booking_page_view($booking, $view_mode = 'full') {
  $controller = entity_get_controller('rooms_booking');
  $content = $controller->view(array($booking->booking_id => $booking));
  drupal_set_title($booking->name);
  return $content;
}


/**
 * Implements hook_views_api().
 */
function rooms_booking_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'rooms_booking') . '/views',
  );
}


/**
 * Implement hook_theme().
 */
function rooms_booking_theme() {
  return array(
    'rooms_booking_add_list' => array(
      'variables' => array('content' => array()),
      'file' => 'rooms_booking.admin.inc',
    ),
    'rooms_booking' => array(
      'render element' => 'elements',
      'template' => 'rooms_booking',
    ),
   'rooms_booking_extra_data' => array(
      'variables' => array('booking_extra_data', 'booking' => NULL),
      'template' => 'rooms_booking-extra-data',
    ),
  );
}


/**
 * Implements hook_menu_local_tasks_alter().
 */
function rooms_booking_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link 'admin/rooms/rooms/add' on 'admin/rooms/rooms'.
  if ($root_path == 'admin/rooms/bookings') {
    $item = menu_get_item('admin/rooms/bookings/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}


function rooms_booking_get_client_profiles($string = '') {
  $matches = array();
  if ($string) {
    if (module_exists('commerce_customer')) {
      $result = db_select('field_data_commerce_customer_address')
        ->fields('field_data_commerce_customer_address', array('commerce_customer_address_name_line', 'commerce_customer_address_thoroughfare', 'entity_id'))
        ->condition('commerce_customer_address_name_line', db_like($string) . '%', 'LIKE')
        ->condition('entity_type', 'commerce_customer_profile')
        ->condition('bundle', 'billing')
        ->range(0, 10)
        ->execute();

      foreach ($result as $customer) {
        $matches[$customer->commerce_customer_address_name_line . ':' . $customer->entity_id] = check_plain($customer->commerce_customer_address_name_line) . '<br>(' . $customer->commerce_customer_address_thoroughfare . ')';
      }
    }
    else {
      $result = db_select('rooms_customers')
        ->fields('rooms_customers', array('name', 'id'))
        ->condition('name', db_like($string) . '%', 'LIKE')
        ->range(0, 10)
        ->execute();
      foreach ($result as $customer) {
        $matches[$customer->name . ':' . $customer->id] = check_plain($customer->name);
      }
    }
  }

  drupal_json_output($matches);
}

/**
 * Find a customer_id in the commerce customer tables looking by customer name.
 *
 * @params string $customer_name
 *   The customer name to lookup.
 *
 * @return
 *   ID of the customer or FALSE if not found.
 */
function rooms_booking_find_customer_by_name($customer_name) {
  if (module_exists('commerce_customer')) {
    return db_select('field_data_commerce_customer_address')
      ->fields('field_data_commerce_customer_address', array('entity_id'))
      ->condition('commerce_customer_address_name_line', $customer_name, '=')
      ->condition('entity_type', 'commerce_customer_profile')
      ->condition('bundle', 'billing')
      ->execute()->fetchField();
  }
  return FALSE;
}

function rooms_booking_get_room_types($string = '') {
  $matches = array();
  if ($string) {
    $result = db_select('rooms_booking_type')
      ->fields('rooms_booking_type', array('type'))
      ->condition('type', db_like($string) . '%', 'LIKE')
      ->range(0, 10)
      ->execute();
    foreach ($result as $room_type) {
      $matches[$room_type->type] = check_plain($room_type->type);
    }
  }

  drupal_json_output($matches);
}


/**
 * The class used for room entities
 */
class RoomsBooking extends Entity {
  // DateTime object calculated from start date
  public $start_date_object;
  // DateTime object calculated from end date
  public $end_date_object;

  public function __construct($values = array()) {
    parent::__construct($values, 'rooms_booking');
    if (isset($this->start_date)) $this->start_date_object = new DateTime($this->start_date);
    if (isset($this->end_date)) $this->end_date_object = new DateTime($this->end_date);
  }

  protected function defaultLabel() {
    return $this->name;
  }

  protected function defaultUri() {
    return array('path' => 'booking/' . $this->booking_id);
  }

}


/**
 * The class used for room type entities
 */
class RoomsBookingType extends Entity {

  public $type;
  public $label;

  public function __construct($values = array()) {
    parent::__construct($values, 'rooms_booking_type');
  }

}


/**
 * The Controller for RoomsBooking entities
 */
class RoomsBookingController extends EntityAPIController {

  public function __construct($entityType) {
    parent::__construct($entityType);
  }

  /**
   * Create a booking - we first set up the values that are specific
   * to our booking but then also go through the EntityAPIController
   * function.
   *
   * @param $type
   *   The machine-readable type of the booking.
   *
   * @return
   *   A booking object with all default fields initialized.
   */
  public function create(array $values = array()) {
    $booking_type = rooms_booking_type_load($values['type'], TRUE);

    // Add values that are specific to our Room
    $values += array(
      'booking_id' => '',
      'is_new' => TRUE,
      'original' => TRUE,
      'title' => '',
      'created' => '',
      'changed' => '',
      'order_id' => '',
      'data' => array(),
    );

    $booking = parent::create($values);
    return $booking;
  }

  public function save($entity) {
    $entity->original = entity_load_unchanged($this->entityType, $entity->{$this->idKey});

    // We are going to be updating the event - so the first step is to remove the old event unless this
    // is a booking we are deleting - in which case we have already removed the event
    if ((!isset($entity->is_new)) && ($entity->unit_id != 0) && ($entity->original->start_date != '') &&
      ($entity->original->end_date != '') && ($entity->type != ROOMS_BOOKING_DELETED)) {
      // Create a calendar
      $uc = new UnitCalendar($entity->original->unit_id);
      $event_id = rooms_availability_assign_id($entity->booking_id, $entity->booking_status);
      // Create an event representing the event to remove
      $be = new BookingEvent($entity->original->unit_id, $event_id, new DateTime($entity->original->start_date), new DateTime($entity->original->end_date));
      $uc->removeEvents(array($be));
    }

    parent::save($entity);

    // We have a unit defined so lets block availability there unless its a booking that is to be deleted
    if (($entity->unit_id != 0) && ($entity->type != ROOMS_BOOKING_DELETED)) {
      // Set the event_id
      $event_id = rooms_availability_assign_id($entity->booking_id, $entity->booking_status);
      $corrected_end_date = new DateTime($entity->end_date);
      $corrected_end_date->sub(new DateInterval('P1D'));
      // Create an event
      $be = new BookingEvent($entity->unit_id, $event_id, new DateTime($entity->start_date), $corrected_end_date);

      // Create UnitCalendar
      $rc = new UnitCalendar($entity->unit_id);
      $responses = $rc->updateCalendar(array($be));

      $entity->rooms_av_update = $responses[$event_id];

      if ($responses[$event_id] == ROOMS_UPDATED) $be->lock();
    }
  }

  /**
   * Overriding the buildContent function to add entity specific fields
   */
  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $content = parent::buildContent($entity, $view_mode, $langcode, $content);

    return $content;
  }

}


/**
 * The Controller for Booking Type entities
 */
class RoomsBookingTypeController extends EntityAPIControllerExportable {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }

   /**
   * Create a booking type - we first set up the values that are specific
   * to our booking type schema but then also go through the EntityAPIController
   * function.
   *
   * @param $type
   *   The machine-readable type of the booking.
   *
   * @return
   *   A booking type object with all default fields initialized.
   */
  public function create(array $values = array()) {
    // Add values that are specific to our Booking Type
    $values += array(
      'id' => '',
      'is_new' => TRUE,
      'data' => '',
    );
    $booking_type = parent::create($values);
    return $booking_type;
  }

}
