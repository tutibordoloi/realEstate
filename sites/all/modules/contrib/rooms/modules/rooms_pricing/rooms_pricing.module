<?php

/**
 * @file
 * Manages pricing for Bookable Units and displaying dates on the jquery FullCalendar
 * plugin
 */

define ('ROOMS_PER_NIGHT', 'rooms_per_night');
define ('ROOMS_PER_PERSON', 'rooms_per_person');


/**
 * Implements hook_permission().
 */
function rooms_pricing_permission() {
  $permissions = array(
    'manage booking unit pricing' => array(
      'title' => t('manage booking unit pricing'),
      'description' => t('Allows users to manage pricing settings for Rooms.'),
      'restrict access' => TRUE,
    ),
  );
  return $permissions;
}


/**
 * Implements hook_menu().
 */
function rooms_pricing_menu() {
  $items  =  array();

  $items['admin/rooms/units/unit/%pricing_unit/pricing'] = array(
    'title' => 'Manage Pricing',
    'page callback' =>  'rooms_pricing_page',
    'page arguments' => array(4, 6, 7),
    'access callback' => 'rooms_pricing_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => '30',
  );

  $items['admin/rooms/units/unit/%pricing_unit/pricing/json/%/%'] = array(
    'title' =>  'Pricing Info',
    'page callback' => 'rooms_pricing_json',
    'page arguments' => array(4, 7, 8, 9, 10, 11, 12),
    'access callback' => 'rooms_pricing_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'weight' => '30',
  );

  return $items;
}



/**
 * Menu load for units - calls the actuall rooms_unit_load implemented in rooms_unit.module
 */
function pricing_unit_load($unit_id) {
  $unit = rooms_unit_load($unit_id);
  return $unit;
}


/**
 * Room pricing access callback
 */
function rooms_pricing_access($rooms_unit) {
  if (user_access('manage booking unit pricing')) {
    return TRUE;
  }
  return FALSE;
}


/**
 * Callback for admin/rooms/units/unit/%pricing_unit/pricing - builds pricing
 * page by adding calendar and pulling events from pricing table.
 *
 */
function rooms_pricing_page(RoomsUnit $rooms_unit, $year='', $month='') {

  // Set the page title.
  drupal_set_title(t('Edit @unit_name Pricing', array('@unit_name' => $rooms_unit->name)));

  // Get the current page's URL, striped of the year and month args.
  // This allows us to place this page anywhere, including at
  // unit/%/pricing  or  admin/rooms/units/unit/%/pricing
  list($url) = explode('/' . $year . '/' . $month, current_path());

  return array(
    '#theme' => 'rooms_three_month_calendar',
    '#url' => $url,
    '#form' => drupal_get_form('update_unit_pricing_form', $rooms_unit->unit_id),
    '#year' => $year,
    '#month' => $month,
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'rooms_pricing') . '/js/rooms_pricing.js',
        array(
          'data' => array('roomsPricing' => array('roomID' => $rooms_unit->unit_id)),
          'type' => 'setting',
        ),
      ),
      'css' => array(
        drupal_get_path('module', 'rooms_pricing') . '/css/rooms_pricing.css',
      ),
    ),
  );
}


/**
 * A basic form that allows us to update the state of the calendar
 */
function update_unit_pricing_form($form, &$form_state, $unit_id) {

  $form['#attributes']['class'][] = 'rooms-management-form unit-pricing-form';

  $form['rooms_update_pricing'] = array(
    '#type' => 'fieldset',
    '#title' => t('Update Unit Pricing'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t('Careful - this will overwrite any existing pricing info.'),
  );

  $form['rooms_update_pricing']['unit_id'] = array(
    '#type' => 'hidden',
    '#value' => $unit_id,
  );

  $form['rooms_update_pricing']['rooms_date_range'] = array(
    '#type' => 'fieldset',
  );

  $form['rooms_update_pricing']['rooms_date_range'] += rooms_date_range_fields();
  // Unset a js setting that is not relevant for pricing
  drupal_add_js(array('rooms' => array('roomsBookingStartDay' => 0)), 'setting');

  $form['rooms_update_pricing']['op'] = array(
    '#type' => 'fieldset',
  );

  $price_options = rooms_price_options_options();
  $form['rooms_update_pricing']['op']['operation'] = array(
    '#type' => 'select',
    '#title' => t('Operation'),
    '#options' => $price_options,
    '#default_value' =>  'replace',
  );

  $form['rooms_update_pricing']['op']['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount'),
    '#default_value' => '',
    '#size' => '5',
    '#description' => t('Amount to apply for rule'),
    '#maxlength' => 10,
    '#required' => TRUE,
  );

  $form['rooms_update_pricing']['actions'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('form-actions')),
    '#weight' => 400,
  );

  // We add the form's #submit array to this button along with the actual submit
  // handler to preserve any submit handlers added by a form callback_wrapper.
  $submit = array();

  if (!empty($form['rooms_update_pricing']['#submit'])) {
    $submit += $form['rooms_update_pricing']['#submit'];
  }

  $form['rooms_update_pricing']['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update Unit Pricing'),
    '#submit' => $submit + array('update_unit_pricing_form_submit'),
  );

  // We append the validate handler to #validate in case a form callback_wrapper
  // is used to add validate handlers earlier.
  $form['#validate'][] = 'rooms_form_start_end_dates_validate';
  $form['#validate'][] = 'update_unit_pricing_form_validate';

  return $form;
}

/**
 * Validate callback form update_unit_pricing_form form.
 */
function update_unit_pricing_form_validate(&$form, &$form_state) {
  // Make sure amount entered is numeric
  if (!empty($form_state['values']['amount']) && !is_numeric($form_state['values']['amount'])) {
    form_set_error('amount', t('%name: you must enter a numeric value for the price.', array('%name' => 'Amount')));
  }
}

/**
 * Submit callback form update_unit_pricing_form form.
 */
function update_unit_pricing_form_submit(&$form, &$form_state) {
  list($start_date, $end_date) = rooms_form_input_get_start_end_dates($form_state);
  $operation = $form_state['values']['operation'];
  $amount = $form_state['values']['amount'];
  $unit_id = $form_state['values']['unit_id'];

  // Get all the pricing events for the date range
  $rc = new UnitPricingCalendar($unit_id);
  $pe = new PricingEvent($unit_id, $amount, $start_date, $end_date, $operation);
  $events = array($pe);

  $rc->updateCalendar($events);
}



/**
 * Creates the necessary json for the date range provided - needs at least start year and month at which point it will
 * return the entire month.
 */
function rooms_pricing_json($unit, $start_year = '', $start_month = '', $start_day = '', $end_year = '', $end_month = '', $end_day = '') {

  $start_year = (int)$start_year;
  $start_month = (int)$start_month;
  $start_day = (int)$start_day;

  $end_year = (int)$end_year;
  $end_month = (int)$end_month;
  $end_day = (int)$end_day;

  $eom = rooms_end_of_month_dates($start_year);

  if (($start_year == 0) || ($start_month == 0)) {
    echo drupal_json_encode('missing basic info');
    return;
  }
  elseif ($start_day == 0) {
    $start_date = new DateTime("$start_year-$start_month-1");
    $end_day = $eom[$start_month];
    $end_date = new DateTime("$start_year-$start_month-$end_day");
  }
  elseif ($start_day != 0 && $end_year == 0) {
    $start_date = new DateTime("$start_year-$start_month-$start_day");
    $end_date = new DateTime("$start_year-$start_month-15");
    $end_date->add(new DateInterval('P1M'));
    $end_year = $end_date->format('Y');
    $end_month = $end_date->format('n');
    $end_day = $eom[$end_date->format('n')];
    $end_date = new DateTime("$end_year-$end_month-$end_day");
  }
  else{
    $start_date = new DateTime("$start_year-$start_month-$start_day");
    $end_date = new DateTime("$end_year-$end_month-$end_day");
  }

  $rc = new UnitPricingCalendar($unit->unit_id);

  $events = $rc->getEvents($start_date, $end_date);
  $json_events  = array();

  foreach ($events as $event) {
    $json_events[] = $event->formatJson();
  }

  echo drupal_json_encode($json_events);

}

