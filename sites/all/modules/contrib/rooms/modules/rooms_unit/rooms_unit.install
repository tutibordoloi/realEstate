<?php

/**
 * @file
 * Sets up the base table for our entity and a table to store information about
 * the entity types.
 */


/**
 * Implements hook_install().
 */
function rooms_unit_install() {
  rooms_description_content_type_install();
}

/**
 * Implements hook_uninstall().
 */
function rooms_unit_uninstall() {
  rooms_description_content_type_uninstall();

  // Delete options field.
  field_delete_field('rooms_booking_unit_options');

  // Delete other rooms fields.
  foreach (_rooms_description_installed_fields() as $field) {
    field_delete_field($field['field_name']);
  }
  $limit = variable_get('field_purge_batch_size', 10);
  field_purge_batch($limit);
}


/**
 * Implements hook_schema().
 */
function rooms_unit_schema() {
  $schema = array();

  $schema['rooms_units'] = array(
    'description' => 'The base table for Rooms.',
    'fields' => array(
      'unit_id' => array(
        'description' => 'Primary Key: Identifier for a Bookable Unit.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The {unit_type}.type of this Bookable Unit.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'language' => array(
        'description' => 'The language of the Unit.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'name' => array(
        'description' => 'The name of the Unit - a human-readable identifier.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the Unit was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the Unit was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'base_price' => array(
        'description' => 'The default cost per night for the unit',
        'type' => 'numeric',
        'not null' => TRUE,
        'precision' => 10,
        'scale' => 2,
        'default' => 0,
      ),
      'default_state' => array(
        'description' => 'The default booking state for the room',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'bookable' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
        'description' => 'Whether the unit is available for booking or not.',
      ),
      'min_sleeps' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
        'description' => 'How many people can sleep in a unit (MIN)',
      ),
      'max_sleeps' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
        'description' => 'How many people can sleep in a unit (MAX)',
      ),
      'min_children' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'How many children can sleep in a unit (MIN)',
      ),
      'max_children' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'How many children can sleep in a unit (MAX)',
      ),
      'data' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data.',
      ),
    ),
    'primary key' => array('unit_id'),
    'indexes' => array(
      'type' => array('type'),
    ),
  );

  $schema['rooms_unit_type'] = array(
    'description' => 'Stores information about defined unit types.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique unit type identifier.',
      ),
      'type' => array(
        'description' => 'The machine-readable name of this unit type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human-readable name of this unit type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'The weight of this room type in relation to others.',
      ),
      'data' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data related to this unit type.',
      ),
      // These two fields provide exportable support and come from Entity module definitions
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'type' => array('type'),
    ),
  );

  return $schema;
}


/**
 * Create content type for rooms unit type description
 */
function rooms_description_content_type_install() {
  $t = get_t();
  // We define the node type as an associative array.
  if (!in_array('unit_description', node_type_get_names())) {
    $unit_description = array(
      'type' => 'unit_description',
      'name' => $t('Unit Description'),
      'base' => 'node_content',
      'description' => $t('Bookable Unit Description.'),
      'title_label' => $t('Title'),
      'custom' => TRUE,
    );
  }

  $content_type = node_type_set_defaults($unit_description);

  foreach (_rooms_description_installed_fields() as $field) {
    field_create_field($field);
  }

  foreach (_rooms_description_installed_instances() as $instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = $unit_description['type'];
    field_create_instance($instance);
  }

  node_type_save($content_type);
}



/**
 * Create fields on content type for Rooms bookable unit description.
 */
function _rooms_description_installed_fields() {
  $t = get_t();
  return array(
    'unit_description_description' => array(
      'field_name' => 'unit_description_description',
      'type'        => 'text',
      'label' => $t('Unit type description'),
    ),
    'unit_description_image' => array(
      'field_name' => 'unit_description_image',
      'type'       => 'image',
      'cardinality' => 1,
      'label' => 'Image',
    ),
  );
}


function _rooms_description_installed_instances() {
  $t = get_t();
  return array(
    'unit_description_description' => array(
      'field_name' => 'unit_description_description',
      'label'       => $t('A description of this unit type.'),
      'widget'      => array(
        'type'    => 'text_textarea',
      ),
      'display' => array(
        'unit_description_list' => array(
          'label' => 'hidden',
          'type' => 'unit_description_description',
        ),
      ),
    ),
    'unit_description_image' => array(
      'field_name'  => 'unit_description_image',
      'label'       => $t('Image'),
      'required'    => FALSE,
      'widget' => array(
        'type'    => 'image_image',
        'weight'  => 2.10,
      ),
      'display' => array(
        'unit_description_list' => array(
          'label' => 'hidden',
          'type' => 'image_link_content__thumbnail',
        ),
      ),
    ),
  );
}


/*
 * Remove content type Unit Description
 */

function rooms_description_content_type_uninstall() {

  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'unit_description'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  node_delete_multiple($nids);

  foreach (array_keys(_rooms_description_installed_fields()) as $field) {
    field_delete_field($field);
  }

  $instances = field_info_instances('node', 'unit_description');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  node_type_delete('unit_description');

  field_purge_batch(1000);
}



/**
 * Changes bace_price field to numeric storage
 */
function rooms_unit_update_7001() {
  $base_price_field_spec = array(
    'description' => 'The default cost per night for the unit',
    'type' => 'numeric',
    'not null' => TRUE,
    'precision' => 10,
    'scale' => 2,
    'default' => 0,
  );

  db_change_field('rooms_units', 'base_price', 'base_price', $base_price_field_spec);

  return t('Schema for the rooms_unit table has been updated.');

}


/**
 * Create rooms_description content type
 */
function rooms_unit_update_7002() {
  rooms_description_content_type_install();
}


/**
 * Add fields for children
 */
function rooms_unit_update_7003() {
  $cot_surcharge = array(
    'description' => 'The default cot_surcharge',
    'type' => 'numeric',
    'not null' => TRUE,
    'precision' => 10,
    'scale' => 2,
    'default' => 0,
  );

  db_add_field('rooms_units', 'cot_surcharge', $cot_surcharge);


  $children = array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
    'size' => 'tiny',
    'description' => 'How many children can sleep in a unit',
  );

  db_add_field('rooms_units', 'children', $children);
}


/**
 * Remove field cot_surcharge
 */
function rooms_unit_update_7004() {
  db_drop_field('rooms_units', 'cot_surcharge');
}


/**
 * Add max and min sleeps, add max and min children
 */
function rooms_unit_update_7005() {
  $max_sleeps = array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => 1,
    'size' => 'tiny',
    'description' => 'How many people can sleep in a unit (MAX)',
  );

  db_change_field('rooms_units', 'sleeps', 'max_sleeps', $max_sleeps);

  $max_children = array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
    'size' => 'tiny',
    'description' => 'How many children can sleep in a unit (MAX)',
  );

  db_change_field('rooms_units', 'children', 'max_children', $max_children);


  $min_sleeps = array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => 1,
    'size' => 'tiny',
    'description' => 'How many people can sleep in a unit (MIN)',
  );

  db_add_field('rooms_units', 'min_sleeps', $min_sleeps);

  $min_children = array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
    'size' => 'tiny',
    'description' => 'How many children can sleep in a unit (MIN)',
  );

  db_add_field('rooms_units', 'min_children', $min_children);


  db_update('rooms_units')->expression('min_sleeps', 'max_sleeps')->execute();
  db_update('rooms_units')->expression('min_children', 'max_children')->execute();
}


/**
 * Add max and min sleeps for Bookable Unit Types
 */
function rooms_unit_update_7006() {
  foreach (rooms_unit_types_ids() as $type => $label) {
    $unit_type = rooms_unit_type_load($type);

    $unit_type->data = array(
      'base_price' => $unit_type->data['base_price'],
      'min_sleeps' => $unit_type->data['sleeps'],
      'max_sleeps' => $unit_type->data['sleeps'],
      'min_children' => $unit_type->data['children_sleeps'],
      'max_children' => $unit_type->data['children_sleeps'],
      'rooms_description_source' => $unit_type->data['$unit_type->data'],
    );

    rooms_unit_type_save($unit_type);
  }
}


/**
 * Rename 'field_options' to 'rooms_booking_unit_options' and attach this field to any istance of rooms_unit
 */
function rooms_unit_update_7007() {
  if (field_info_field('field_options') !== NULL) {
    // Rename old field 'field_options' to 'rooms_booking_unit_options'
    db_query("UPDATE field_config SET field_name = 'rooms_booking_unit_options' WHERE field_name = 'field_options'");

    db_query("UPDATE field_config_instance SET field_name = 'rooms_booking_unit_options' WHERE field_name = 'field_options'");


    db_query("RENAME TABLE field_data_field_options TO field_data_rooms_booking_unit_options");

    db_query("ALTER TABLE field_data_rooms_booking_unit_options CHANGE field_options_name rooms_booking_unit_options_name VARCHAR(255) NOT NULL");
    db_query("ALTER TABLE field_data_rooms_booking_unit_options CHANGE field_options_quantity rooms_booking_unit_options_quantity INT(11) DEFAULT NULL");
    db_query("ALTER TABLE field_data_rooms_booking_unit_options CHANGE field_options_operation rooms_booking_unit_options_operation varchar(255) DEFAULT NULL");
    db_query("ALTER TABLE field_data_rooms_booking_unit_options CHANGE field_options_value rooms_booking_unit_options_value INT(11) DEFAULT NULL");


    db_query("RENAME TABLE field_revision_field_options TO field_revision_rooms_booking_unit_options");

    db_query("ALTER TABLE field_revision_rooms_booking_unit_options CHANGE field_options_name rooms_booking_unit_options_name VARCHAR(255) NOT NULL");
    db_query("ALTER TABLE field_revision_rooms_booking_unit_options CHANGE field_options_quantity rooms_booking_unit_options_quantity INT(11) DEFAULT NULL");
    db_query("ALTER TABLE field_revision_rooms_booking_unit_options CHANGE field_options_operation rooms_booking_unit_options_operation varchar(255) DEFAULT NULL");
    db_query("ALTER TABLE field_revision_rooms_booking_unit_options CHANGE field_options_value rooms_booking_unit_options_value INT(11) DEFAULT NULL");
  }
  else {
    // Create field 'rooms_booking_unit_options'
    $field = array(
      'field_name' => 'rooms_booking_unit_options',
      'type' => 'rooms_options',
      'cardinality' => -1,
    );
    field_create_field($field);
  }

  cache_clear_all();
  field_cache_clear();

  foreach (rooms_unit_types_ids() as $type => $value) {
    // Attach field 'rooms_booking_unit_options' to any instance of rooms_unit
    if (field_info_instance('rooms_unit', 'rooms_booking_unit_options', $type) === NULL) {
      $instance = array(
        'field_name' => 'rooms_booking_unit_options',
        'entity_type' => 'rooms_unit',
        'label' => 'Options',
        'bundle' => $type,
        'required' => FALSE,
        'widget' => array(
          'type' => 'rooms_options',
        ),
      );
      field_create_instance($instance);
    }
  }
}


/**
 * Update all data saved in Rooms Unit Type to change max/min_children_sleeps to max/min_children
 */
function rooms_unit_update_7008() {

  foreach (rooms_unit_types_ids() as $type => $label) {
    $unit_type = rooms_unit_type_load($type);

    $unit_type->data = array(
      'base_price' => $unit_type->data['base_price'],
      'min_sleeps' => $unit_type->data['min_sleeps'],
      'max_sleeps' => $unit_type->data['max_sleeps'],
      // Check to see if min/max_children_sleeps is set and move that to  min/max_children
      'min_children' => isset($unit_type->data['min_children_sleeps']) ? $unit_type->data['min_children_sleeps'] : $unit_type->data['min_children'],
      'max_children' => isset($unit_type->data['max_children_sleeps']) ? $unit_type->data['max_children_sleeps'] : $unit_type->data['max_children'],
      'rooms_description_source' => $unit_type->data['$unit_type->data'],
    );

    rooms_unit_type_save($unit_type);
  }

}
