<?php

/**
 * @file
 * Manage units - Units are things that can be booked on a nightly basis (e.g. rooms - but also villas
 * bangalows, etc).
 */

/**
 * Defining some room states that will be used throughout
 *
 */
define ('ROOMS_NOT_AVAILABLE', 0);
define ('ROOMS_AVAILABLE', 1);
define ('ROOMS_ON_REQUEST', 2);
define ('ROOMS_ANON_BOOKED', 3);

define ('ROOMS_UNCONFIRMED_BOOKINGS', -1);

/**
 * Defining responses for Calendar Updated
 */
define ('ROOMS_BLOCKED', 100);
define ('ROOMS_UPDATED', 200);
define ('ROOMS_WRONG_UNIT', 300);



/**
 * Implement hook_menu()
 */
function rooms_unit_menu() {
  $items  =  array();

  $items['admin/rooms/unit-type/description-source'] = array(
    'title' => 'Unit type description source',
    'page callback' => 'rooms_unit_type_description_source',
    'access arguments' => array('administer bookable units'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Implement hook_entity_info().
 */
function rooms_unit_entity_info() {
  $return['rooms_unit'] = array(
    'label' => t('Bookable Units'),
    // The entity class and controller class extend the classes provided by the
    // Entity API
    'entity class' => 'RoomsUnit',
    'controller class' => 'RoomsUnitController',
    'base table' => 'rooms_units',
    'fieldable' => TRUE,
    'entity keys' => array(
        'id' => 'unit_id',
        'bundle' => 'type',
    ),
    // Bundles are defined by the unit types below
    'bundles' => array(),
    // Bundle keys tell the FieldAPI how to extract information from the bundle objects
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'rooms_unit_create',
    'access callback' => 'rooms_unit_access',
    'module' => 'rooms_unit',
    // The information below is used by the RoomsRoomUIController (which extends the EntityDefaultUIController)
    'admin ui' => array(
      'path' => 'admin/rooms/units',
      'file' => 'rooms_unit.admin.inc',
      'controller class' => 'RoomsUnitUIController',
      'menu wildcard' => '%rooms_unit',
    ),
  );
  // The entity that holds information about the entity types
  $return['rooms_unit_type'] = array(
    'label' => t('Bookable Unit Type'),
    'entity class' => 'RoomsUnitType',
    'controller class' => 'RoomsUnitTypeController',
    'base table' => 'rooms_unit_type',
    'fieldable' => FALSE,
    'bundle of' => 'rooms_unit',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'access callback' => 'rooms_unit_type_access',
    'module' => 'rooms_unit',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/rooms/units/unit-types',
      'file' => 'rooms_unit_type.admin.inc',
      'controller class' => 'RoomsUnitTypeUIController',
    ),
  );

  return $return;
}


/**
 * Implements hook_entity_info_alter().
 *
 * We are adding the info about the unit types via a hook to avoid a recursion
 * issue as loading the room types requires the entity info as well.
 *
 * @todo This needs to be improved
 */
function rooms_unit_entity_info_alter(&$entity_info) {
  foreach (rooms_unit_get_types() as $type => $info) {
    $entity_info['rooms_unit']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/rooms/units/unit-types/manage/%rooms_unit_type',
        'real path' => 'admin/rooms/units/unit-types/manage/' . $type,
        'bundle argument' => 5,
        'access arguments' => array('administer bookable units'),
      ),
    );
  }
  // Create custom build mode
  $entity_info['node']['view modes']['rooms_list'] = array(
    'label' => t('Rooms Results View'),
    'custom settings' => FALSE,
  );
}



/**
 * Implements hook_permission().
 */
function rooms_unit_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
    'administer bookable unit types' => array(
      'title' => t('Administer unit types'),
      'description' => t('Create and delete fields for bookable unit types, and set their permissions.'),
    ),
    'administer bookable units' => array(
      'title' => t('Administer bookable units'),
      'description' => t('Edit and delete all bookable units'),
    ),
  );

  //Generate permissions per room
  foreach (rooms_unit_get_types() as $type) {
    $type_name = check_plain($type->type);
    $permissions += array(
      "edit any $type_name bookable unit" => array(
        'title' => t('%type_name: Edit any bookable unit', array('%type_name' => $type->label)),
      ),
      "view any $type_name bookable unit" => array(
        'title' => t('%type_name: View any bookable unit', array('%type_name' => $type->label)),
      ),
    );
  }
  return $permissions;
}


/**
 * Determines whether the given user has access to a bookable unit.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $unit
 *   Optionally a unit or a unit type to check access for. If nothing is
 *   given, access for all units is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function rooms_unit_access($op, $unit = NULL, $account = NULL) {
  if (user_access('administer bookable units', $account)) {
    return TRUE;
  }
  if (is_object($unit)) {
    $op = ($op == 'view') ? 'view' : 'edit';
    if (user_access("$op any $unit->type bookable unit", $account)) {
      return TRUE;
    }
  }
  return FALSE;
}


/**
 * Access callback for the entity API.
 */
function rooms_unit_type_access($op, $type = NULL, $account = NULL) {
  return user_access('administer bookable unit types', $account);
}


/**
 * Gets an array of all unit types, keyed by the type name.
 *
 * @param $type_name
 *   If set, the type with the given name is returned.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return RoomsUnitType[]
 *   Depending whether $type isset, an array of unit types or a single one.
 */
function rooms_unit_get_types($type_name = NULL, $reset = FALSE) {
  // entity_load will get the Entity controller for our unit entity and call the load
  // function of that object.
  $types = entity_load_multiple_by_name('rooms_unit_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}


/**
 * Helper function useful to easily get unit types in an array for use in forms, etc
 *
 * @return $unit_types
 *  an array of unit types keyed by type name and labels
*/
function rooms_unit_types_ids() {
  $unit_types = array();
  $types = rooms_unit_get_types();
  foreach ($types as $type) {
    $unit_types[$type->type] = $type->label;
  }

  return $unit_types;
}


/**
 * Menu argument loader; Load a unit type by string.
 *
 * @param $type
 *   The machine-readable name of a unit type to load.
 * @return
 *   A unit type array or FALSE if $type does not exist.
 */
function rooms_unit_type_load($type, $reset = FALSE) {
  return rooms_unit_get_types($type, $reset);
}


/**
 * Fetch a bookable unit object. Make sure that the wildcard you choose
 * in the unit entity definition fits the function name here.
 *
 * @param $unit_id
 *   Integer specifying the unit id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $unit object or FALSE if it cannot be loaded.
 *
 * @see rooms_unit_load_multiple()
 */
function rooms_unit_load($unit_id, $reset = FALSE) {
  $units = rooms_unit_load_multiple(array($unit_id), array(), $reset);
  return reset($units);
}


/**
 * Load multiple units based on certain conditions.
 *
 * @param $unit_ids
 *   An array of unit IDs.
 * @param $conditions
 *   An array of conditions to match against the {rooms_units} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of unit objects, indexed by unit_id.
 *
 * @see entity_load()
 * @see rooms_unit_load()
 */
function rooms_unit_load_multiple($unit_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('rooms_unit', $unit_ids, $conditions, $reset);
}


/**
 * Deletes a bookable unit.
 *
 * @param RoomsUnit $room
 * The RoomsUnit object that represents the unit to delete
 */
function rooms_unit_delete(RoomsUnit $unit) {
  $unit->delete();
}


/**
 * Delete multiple units.
 *
 * @param $unit_ids
 *   An array of unit IDs.
 */
function rooms_unit_delete_multiple(array $unit_ids) {
  entity_get_controller('rooms_unit')->delete($unit_ids);
}


/**
 * Create a room object.
 */
function rooms_unit_create($values = array()) {
  return entity_get_controller('rooms_unit')->create($values);
}


/**
 * Saves a unit to the database.
 *
 * @param RoomsUnit $unit
 *   The Unit object.
 */
function rooms_unit_save(RoomsUnit $unit) {
  return $unit->save();
}


/**
 * Saves a unit type to the db.
 */
function rooms_unit_type_save(RoomsUnitType $type) {
  $type->save();
}


/**
 * Deletes a unit type from the db.
 */
function rooms_unit_type_delete(RoomsUnitType $type) {
  $type->delete();
}


/**
 * URI callback for units
 */
function rooms_unit_uri(RoomsUnit $unit) {
  return array(
    'path' => 'unit/' . $unit->unit_id,
  );
}


/**
 * Menu title callback for showing individual entities
 */
function rooms_unit_page_title(RoomsUnit $unit) {
  return $unit->name;
}



/**
 * Get a list of Units keyed by id and name in value
 *
 * @todo - double check utility of this and perhaps use rooms_unit_load_multiple
 */
function rooms_unit_ids($bundle = '') {

  $units = array();

  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'rooms_unit');

  if ($bundle != '') {
    $query->entityCondition('bundle', $bundle);
  }

  $result = $query->execute();

  if (count($result) > 0 ) {
    $entities = entity_load('rooms_unit', array_keys($result['rooms_unit']));
    foreach ($entities as $unit) {
      $wrapper = entity_metadata_wrapper('rooms_unit', $unit);
      $units[$wrapper->unit_id->value()] = $wrapper->name->value();
    }
  }

  return $units;
}

/**
 * Sets up content to show an individual unit
 * @todo - get rid of drupal_set_title();
 */
function rooms_unit_page_view($unit, $view_mode = 'full') {
  $controller = entity_get_controller('rooms_unit');
  $content = $controller->view(array($unit->unit_id => $unit));
  drupal_set_title($unit->name);
  return $content;
}


/**
 * Implements hook_views_api().
 */
function rooms_unit_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'rooms_unit') . '/views',
  );
}


/**
 * Implement hook_theme().
 */
function rooms_unit_theme() {
  return array(
    'rooms_unit_add_list' => array(
      'variables' => array('content' => array()),
      'file' => 'rooms_unit.admin.inc',
    ),
    'rooms_unit' => array(
      'render element' => 'elements',
      'template' => 'rooms_unit',
    ),
   'rooms_unit_extra_data' => array(
      'variables' => array('unit_extra_data', 'unit' => NULL),
      'template' => 'rooms_unit-extra-data',
    ),
  );
}


/**
 * Helper function for Unit Description autocomplete.
 */
function rooms_unit_type_description_source($string = '') {
  $matches = array();

  if ($string) {
    $result = db_select('node', 'n')
      ->fields('n', array('title', 'nid'))
      ->condition('title', db_like($string) . '%', 'LIKE')
      ->condition('n.type', 'unit_description')
      ->range(0, 10)
      ->execute();
    foreach ($result as $description) {
      $matches[$description->title . ':' . $description->nid] = check_plain($description->title);
    }
  }
  drupal_json_output($matches);
}


/**
 * Implements hook_menu_local_tasks_alter().
 */
function rooms_unit_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Create an action link on the Rooms Units admin page for adding new units.
  if ($root_path == 'admin/rooms/units') {
    $item = menu_get_item('admin/rooms/units/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}



/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Prevent a unit type with associated units from being deleted.
 */
function rooms_unit_form_rooms_unit_type_operation_form_alter(&$form, &$form_state, $form_id) {
  // Check if units of a unit type exist before allowing deletion.
  if ($form_state['op'] == 'delete') {
    $unit_type = $form_state['rooms_unit_type'];

    // Load the units associated with this type.
    $query = new EntityFieldQuery();

    $query->entityCondition('entity_type', 'rooms_unit')
          ->propertyCondition('type', $unit_type->type);
    $units = $query->execute();
    if (isset($units['rooms_unit']) && count($units['rooms_unit'])) {

      // This type has associated units, don't allow deletion.
      form_set_error('confirm', t('This unit type has associated units. Please delete all units before attempting to delete this unit type.'));

      unset($form['description']);
      unset($form['actions']);
      unset($form['confirm']);
    }
  }
}

/**
 * Helper function to generate a list of available unit states for select lists.
 *
 * @return array
 *   Array of available unit states keyed by id.
 */
function rooms_unit_state_options() {
  return array(
    ROOMS_NOT_AVAILABLE => t('Unavailable'),
    ROOMS_AVAILABLE => t('Available'),
    ROOMS_ON_REQUEST => t('On Request'),
    ROOMS_ANON_BOOKED => t('Anonymous Booking'),
  );
}

/**
 * The class used for room entities
 */
class RoomsUnit extends Entity {

  public function __construct($values = array()) {
    parent::__construct($values, 'rooms_unit');
  }

  protected function defaultLabel() {
    return $this->name;
  }

  protected function defaultUri() {
    return array('path' => 'unit/' . $this->unit_id);
  }


}


/**
 * The class used for room type entities
 */
class RoomsUnitType extends Entity {

  public $type;
  public $label;

  public function __construct($values = array()) {
    parent::__construct($values, 'rooms_unit_type');
  }

}


/**
 * The Controller for RoomsUnit entities
 */
class RoomsUnitController extends EntityAPIController {

  public function __construct($entityType) {
    parent::__construct($entityType);
  }


  /**
   * Create a bookable unit - we first set up the values that are specific
   * to our unit schema but then also go through the EntityAPIController
   * function.
   *
   * @param $type
   *   The machine-readable type of the unit.
   *
   * @return
   *   A unit object with all default fields initialized.
   */
  public function create(array $values = array()) {
    $unit_type = rooms_unit_type_load($values['type'], TRUE);
    $values['base_price'] = $unit_type->data['base_price'];
    $values['data']['cot_surcharge'] = (isset($unit_type->data['cot_surcharge'])) ? $unit_type->data['cot_surcharge'] : 0;
    $values['min_children'] = (isset($unit_type->data['min_children'])) ? $unit_type->data['min_children'] : 0;
    $values['max_children'] = (isset($unit_type->data['max_children'])) ? $unit_type->data['max_children'] : 0;
    $values['min_sleeps'] = (isset($unit_type->data['min_sleeps'])) ? $unit_type->data['min_sleeps'] : 0;
    $values['max_sleeps'] = (isset($unit_type->data['max_sleeps'])) ? $unit_type->data['max_sleeps'] : 0;

    // Add values that are specific to our Room
    $values += array(
      'unit_id' => '',
      'is_new' => TRUE,
      'original' => TRUE,
      'title' => '',
      'created' => '',
      'changed' => '',
    );

    $unit = parent::create($values);
    return $unit;
  }

  /**
   * Overriding the buildContent function to add entity specific fields
   */
  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $content = parent::buildContent($entity, $view_mode, $langcode, $content);

    $content['state'] =  array(
      '#markup' => t('State') . ': ' . $entity->bookable . '<br/>',
    );

    $content['type'] =  array(
      '#markup' => t('Type') . ': ' . $entity->type . '<br/>',
    );

    $content['sleeps'] =  array(
      '#markup' => t('Sleeps') . ': ' . $entity->max_sleeps . '<br/>',
    );

    if (isset($entity->data['bed_arrangement'])) {
      $content['bed_arrangement'] = array(
        '#markup' => t('Double beds') . ': ' . $entity->data['bed_arrangement']['doubles'] . '<br/>' . t('Single beds') . ': ' . $entity->data['bed_arrangement']['singles'] . '<br/>',
      );
    }

    return $content;
  }

}


/**
 * The Controller for Room entities
 */
class RoomsUnitTypeController extends EntityAPIControllerExportable {

  public function __construct($entityType) {
    parent::__construct($entityType);
  }

   /**
   * Create a unit type - we first set up the values that are specific
   * to our unit type schema but then also go through the EntityAPIController
   * function.
   *
   * @param $type
   *   The machine-readable type of the unit.
   *
   * @return
   *   A unit type object with all default fields initialized.
   */
  public function create(array $values = array()) {
    // Add values that are specific to our Unit
    $values += array(
      'id' => '',
      'is_new' => TRUE,
      'data' => '',
    );
    $unit_type = parent::create($values);
    return $unit_type;
  }

}
